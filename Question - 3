import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class TextJustification {

    // Method to justify a single line of words
    private String justifyLine(List<String> words, int lineLength, int maxWidth) {
        int numWords = words.size();
        if (numWords == 1) {
            // Special case: single word in the line
            StringBuilder sb = new StringBuilder(words.get(0));
            while (sb.length() < maxWidth) {
                sb.append(" ");
            }
            return sb.toString();
        }

        int totalSpaces = maxWidth - lineLength;
        int spacesBetweenWords = totalSpaces / (numWords - 1);
        int extraSpaces = totalSpaces % (numWords - 1);

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < numWords; i++) {
            sb.append(words.get(i));
            if (i < numWords - 1) {
                int spaces = spacesBetweenWords + (i < extraSpaces ? 1 : 0);
                for (int j = 0; j < spaces; j++) {
                    sb.append(" ");
                }
            }
        }

        return sb.toString();
    }

    // Method to justify the entire text
    public List<String> fullJustify(String[] words, int maxWidth) {
        List<String> result = new ArrayList<>();
        List<String> lineWords = new ArrayList<>();
        int lineLength = 0;

        for (String word : words) {
            // Check if the current line can accommodate the new word
            if (lineLength + lineWords.size() + word.length() > maxWidth) {
                // Justify the current line and add to result
                result.add(justifyLine(lineWords, lineLength, maxWidth));
                // Reset for the next line
                lineWords = new ArrayList<>();
                lineLength = 0;
            }
            // Add the word to the current line
            lineWords.add(word);
            lineLength += word.length();
        }

        // Handle the last line separately
        StringBuilder lastLine = new StringBuilder();
        for (int i = 0; i < lineWords.size(); i++) {
            lastLine.append(lineWords.get(i));
            if (i < lineWords.size() - 1) {
                lastLine.append(" ");
            }
        }
        // Pad the end with spaces to fit maxWidth
        while (lastLine.length() < maxWidth) {
            lastLine.append(" ");
        }
        result.add(lastLine.toString());

        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the maximum width
        System.out.print("Enter the maximum width: ");
        int maxWidth = scanner.nextInt();
        scanner.nextLine();  // Consume the remaining newline character

        // Read the words
        System.out.println("Enter the words (separated by spaces): ");
        String input = scanner.nextLine();
        String[] words = input.split(" ");

        // Create an instance of TextJustification
        TextJustification tj = new TextJustification();

        // Get the justified text
        List<String> result = tj.fullJustify(words, maxWidth);

        // Print the result
        System.out.println("Justified text:");
        for (String line : result) {
            System.out.println('"' + line + '"');
        }

        // Close the scanner
        scanner.close();
    }
}
